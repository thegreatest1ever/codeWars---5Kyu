function hamsterMe(code, message) {
    // Initialize alphabet array
    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');

    // Remove duplicates from code
    code = [...new Set(code.split(''))]

    // Make the 2d codeMap
    let codeMap = []
    for(const c of code){
        let tmp = [c]
        let nextChar = alphabet[alphabet.indexOf(c) + 1]
        nextChar = nextChar ? nextChar : 'a'
        while(!code.includes(nextChar)) {
            tmp.push(nextChar)
            nextChar = alphabet[alphabet.indexOf(nextChar) + 1]
            nextChar = nextChar ? nextChar : 'a'
        }
        codeMap.push(tmp)
    }

    // create the final message
    let finalMessage = ''
    message = message.split('')
    for(const m of message){
        for(const c of codeMap){
            if(c.includes(m)){
                finalMessage += `${c[0]}${c.indexOf(m) + 1}`
                break
            }
        }
    }

    return finalMessage;
}
//
def hamster_me(code, message):
    # Initialize alphabet list
    alphabet = list('abcdefghijklmnopqrstuvwxyz')

    # Remove duplicates from code
    code = list(set(code))

    # Make the 2D codeMap
    code_map = []
    for c in code:
        tmp = [c]
        next_char = alphabet[alphabet.index(c) + 1] if alphabet.index(c) + 1 < len(alphabet) else 'a'
        while next_char not in code:
            tmp.append(next_char)
            next_char = alphabet[alphabet.index(next_char) + 1] if alphabet.index(next_char) + 1 < len(alphabet) else 'a'
        code_map.append(tmp)

    # Create the final message
    final_message = ''
    for m in message:
        for c in code_map:
            if m in c:
                final_message += f"{c[0]}{c.index(m) + 1}"
                break

    return final_message
