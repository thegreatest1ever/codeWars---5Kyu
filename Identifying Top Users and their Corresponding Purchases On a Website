function idBestUsers(...arrays) {
  const combinedArray = arrays.reduce((acc, array) => acc.concat(array), []);
  const counts = {};

  const arraySets = arrays.map((arr) => new Set(arr));

  for (const string of combinedArray) {
    if (arraySets.every((set) => set.has(string))) {
      counts[string] = (counts[string] || 0) + 1;
    }
  }

  const countStringPairs = Object.entries(counts).map(([string, count]) => [count, string]);

  countStringPairs.sort((a, b) => {
    if (a[0] === b[0]) {
      return a[1].localeCompare(b[1]);
    }
    return b[0] - a[0];
  });

  const result = countStringPairs.reduce((acc, [count, string]) => {
    const existingGroup = acc.find((group) => group[0] === count);

    if (existingGroup) {
      existingGroup[1].push(string);
    } else {
      acc.push([count, [string]]);
    }

    return acc;
  }, []);

  return result;
}
//
from collections import defaultdict

def id_best_users(*arrays):
    combined_array = sum(arrays, [])
    counts = defaultdict(int)
    array_sets = [set(arr) for arr in arrays]

    for string in combined_array:
        if all(string in s for s in array_sets):
            counts[string] += 1

    count_string_pairs = [(count, string) for string, count in counts.items()]
    count_string_pairs.sort(key=lambda x: (-x[0], x[1]))

    result = []
    for count, string in count_string_pairs:
        existing_group = next((group for group in result if group[0] == count), None)
        if existing_group:
            existing_group[1].append(string)
        else:
            result.append([count, [string]])

    return result

